name: Tag and Release

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Get the current version from the file
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if the current version is already tagged
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag --list "v${{ env.VERSION }}")
          echo "Checking tag existence: $TAG_EXISTS"
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag v${{ env.VERSION }} already exists."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag v${{ env.VERSION }} does not exist."
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Set the new version
        id: set_new_version
        run: |
          if [ "${{ env.TAG_EXISTS }}" = "true" ]; then
            IFS='.' read -r major minor patch <<< "${{ env.VERSION }}"
            new_patch=$((patch + 1))
            NEW_VERSION="$major.$minor.$new_patch"
            echo "Tag exists, incrementing version to $NEW_VERSION"
          else
            NEW_VERSION=${{ env.VERSION }}
            echo "Tag does not exist, using current version $NEW_VERSION"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set Up Remote URL with PAT
        run: |
          git remote set-url origin "https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git"
          git remote -v  # Print the current remote URL configuration

      - name: Update VERSION file if the version was incremented
        id: update_version_file
        run: |
          VERSION=$(echo "${{ env.VERSION }}")
          NEW_VERSION=$(echo "${{ env.NEW_VERSION }}")
          if [ "$VERSION" != "$NEW_VERSION" ]; then
            echo "Updating VERSION file to $NEW_VERSION"
            echo "$NEW_VERSION" > VERSION
            git add VERSION
            git commit -m "Bump version to $NEW_VERSION [skip ci]"
            git push origin main
          else
            echo "No changes to VERSION file needed."
          fi

      - name: Create and Push Tag
        run: |
          echo "Creating tag v${{ env.NEW_VERSION }}"
          git tag "v${{ env.NEW_VERSION }}"
          echo "Pushing tag v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

  release:
    runs-on: ubuntu-latest
    needs: tag

    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go Modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          release_name: "Release v${{ env.NEW_VERSION }}"
          body: |
            Changes in this release:
            - TODO: Add release notes here
          draft: false
          prerelease: false
