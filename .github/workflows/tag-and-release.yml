name: Tag and Release

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Get the current version from file
        id: vars
        run: |
          echo ::set-output name=version::$(cat VERSION)

      - name: Check if the current version is already tagged
        id: check_tag
        run: |
          VERSION=$(cat VERSION)
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION exists."
            echo "::set-output name=use_tag::true"
          else
            echo "Tag v$VERSION does not exist."
            echo "::set-output name=use_tag::false"
          fi

      - name: Increment version if necessary
        id: increment_version
        run: |
          if [ "${{ steps.check_tag.outputs.use_tag }}" == "true" ]; then
            new_version="${{ steps.vars.outputs.version }}"
          else
            echo "Current version: ${{ steps.vars.outputs.version }}"
            IFS='.' read -r major minor patch <<< "${{ steps.vars.outputs.version }}"
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          fi
          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Add PAT for Authentication
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Create and Push Tag
        run: |
          new_version=${{ steps.increment_version.outputs.new_version }}
          git tag "v$new_version"
          git push origin "v$new_version"

      - name: Update VERSION file (if version was incremented)
        if: steps.check_tag.outputs.use_tag == 'false'
        run: |
          new_version=${{ steps.increment_version.outputs.new_version }}
          echo $new_version > VERSION
          git add VERSION
          git commit -m "Bump version to $new_version"
          git push origin main

  release:
    runs-on: ubuntu-latest
    needs: tag

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go Modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.increment_version.outputs.new_version }}"
          release_name: "Release v${{ steps.increment_version.outputs.new_version }}"
          body: |
            Changes in this release:
            - TODO: Add release notes here
          draft: false
          prerelease: false